import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || ''

// Verificar se as vari√°veis est√£o configuradas
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis do Supabase n√£o configuradas:', {
    url: !!supabaseUrl,
    anonKey: !!supabaseAnonKey
  })
}

// Cliente p√∫blico para opera√ß√µes client-side
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
})

// Cliente admin para opera√ß√µes server-side (apenas quando service key dispon√≠vel)
export const supabaseAdmin = supabaseServiceKey 
  ? createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })
  : null

// Fun√ß√£o para verificar se Supabase est√° configurado
export const isSupabaseConfigured = () => {
  const configured = !!(supabaseUrl && supabaseAnonKey)
  console.log('üîß Supabase configurado:', configured)
  return configured
}

// Fun√ß√£o para verificar se admin est√° configurado
export const isSupabaseAdminConfigured = () => {
  return !!(supabaseUrl && supabaseServiceKey)
}

// Fun√ß√£o para testar conex√£o
export const testSupabaseConnection = async () => {
  try {
    console.log('üîç Testando conex√£o com Supabase...')
    const { data, error } = await supabase.from('users_meta').select('count', { count: 'exact', head: true })
    
    if (error) {
      console.error('‚ùå Erro na conex√£o:', error)
      return false
    }
    
    console.log('‚úÖ Conex√£o com Supabase funcionando')
    return true
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o:', error)
    return false
  }
}

// Tipos do banco
export interface UserMeta {
  id: string
  email: string
  nome: string
  status_assinatura: 'trial' | 'ativo' | 'inativo'
  data_inicio: string
  data_expiracao: string
  created_at: string
}

export interface Conteudo {
  id: string
  tipo: 'reflexao' | 'oracao' | 'liturgia'
  titulo: string
  conteudo: string
  data: string
  premium: boolean
  created_at: string
}

export interface Versiculo {
  id: string
  referencia: string
  texto: string
  data: string
  created_at: string
}

export interface Assinatura {
  id: string
  user_id: string
  status: 'pendente' | 'ativo' | 'cancelado'
  valor: number
  data_pagamento?: string
  metodo_pagamento: string
  created_at: string
}

export interface PersonagemBiblico {
  id: string
  nome: string
  descricao: string
  historia: string
  versiculo_relacionado: string
  data: string
  created_at: string
}